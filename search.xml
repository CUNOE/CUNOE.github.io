<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018年度总结</title>
    <url>/2018/12/31/2018/</url>
    <content><![CDATA[<p>时间流逝不等人<br>转眼之间就来到了2018的最后一天<br>是时候总结一下了</p>
<h2 id="瞎逼逼"><a href="#瞎逼逼" class="headerlink" title="瞎逼逼"></a>瞎逼逼</h2><p>二零一八年感觉过得格外快的一年，可能是生活节奏的变化吧，哪像之前的咸鱼生活</p>
<p>今年是我写博客以来的第三个年头了，可能你会问为何最早只有到今年七八月的，这是因为之前写的文章都因为某些技术上的原因，被我搞丢了，那段时间有停更了半年，直到今年七八月我才重新开始写博客。感觉今年最大的变化就是又老了一岁吧……</p>
<p>哦对了，还有就是七月份我接触Python，并从Java投入Python的怀抱。</p>
<h2 id="看过的书"><a href="#看过的书" class="headerlink" title="看过的书"></a>看过的书</h2><p>18年可以说是我看书看的比较多的一年。我是个挺浮躁的人，看书总静不下心，可能是生活的快节奏和读书的慢节奏不匹配的原因吧。总是看了一会儿就放到一边，自制力可以说是越来越差。近年底的几个月，我强迫自己远离了电子设备，从书架上拿出了买了，但几乎不看的书。</p>
<ul>
<li>《时间移民》大刘的短篇科幻小说<br>这是我拿下来的第一本书，主要是因为太久没看书，想先从简单点的入手，培养一下感觉，当然也不是说特意选的。为什么不是长篇小说呢？我个人感觉长篇小说看起来其实挺累的，毕竟书的内容多，情节丰富，对我的思维考验挺大的。</li>
<li>《GAMERS 电玩咖！》日本恋爱喜剧轻小说<br>看了两本短篇小说后，朋友给我推荐了轻小说，我才突然想起有很多动漫是轻小说改编的，于是就挑了一部我比较喜欢的动漫的轻小说看了看。轻小说给我的感觉很特殊，看起来压力小，很简单，篇幅大，有些轻小说都出到几十卷了，令人汗颜，但毕竟这种类型的小说被定义为可以轻松阅读的小说，一卷看下来也花不了多少时间，这种小说类型可以说是立马让我爱上了</li>
<li>一坨技术书籍<br>这类没什么好说的，主要是学习新知识必须要看的。</li>
</ul>
<h2 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h2><p>说到年前期望，我就想起了…  :-D</p>
<p>2019快到了，希望明年的自己可以看更多书，接触更多的人，了解更多的知识。</p>
<p>还有期待和朋友做的区块链项目能在明年初上线( ^_^ )</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>2018 - 2019</p>
<blockquote>
<p>Thank You For Your Support<br>CUNOE记<br>2018.12.31</p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Django及uWSGI的部署方案</title>
    <url>/2019/01/31/django/</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>这篇文章为我在2019年1月31日部署Django的笔记，具体环境如下：</p>
<pre><code>System：Ubuntu 16.04.5 LTS
Web Server:Nginx/1.10.3 uWSGI/2.0.17.1
Other:Django/2.1.5 Python/3.7[Anaconda]
注：Django是一个高层次的Python Web框架
Nginx是一个免费开源且高性能的HTTP服务器和反向代理
</code></pre>
<p>目前使用Nginx和uWSGI部署Django项目还是比较主流的方案之一，也是一种可靠而简单的方案</p>
<span id="more"></span>
<p>具体组件栈如下所示</p>
<blockquote>
<p>the web client &lt;-&gt; Nginx &lt;-&gt; the socket &lt;-&gt; uWSGI &lt;-&gt; Django</p>
</blockquote>
<h2 id="设置uWSGI前"><a href="#设置uWSGI前" class="headerlink" title="设置uWSGI前"></a>设置uWSGI前</h2><blockquote>
<p>以下全文域名均以 <code>example.com</code> 为例 端口将以 <code>8000</code> 为例</p>
</blockquote>
<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>将Django安装至你的服务器上并创建[或将本地项目复制到服务器上]</p>
<pre><code>pip install Django==2.1.5
django-admin.py startproject myWeb    # 新建Django项目
cd myWeb
</code></pre>
<h2 id="uWSGI安装以及配置"><a href="#uWSGI安装以及配置" class="headerlink" title="uWSGI安装以及配置"></a>uWSGI安装以及配置</h2><h3 id="uWSGI安装"><a href="#uWSGI安装" class="headerlink" title="uWSGI安装"></a>uWSGI安装</h3><pre><code>pip install uwsgi
</code></pre>
<p>这不是唯一的安装uWSGI的方式，但是我认为比较好的方案<br>需要注意的是，安装uWSGI之前要记得在服务器上安装Python的开发包，以免出现各种错误<br>我的系统为<code>apt-get install python3.7-dev</code><br>但我安装的过程中还出现了不一样的错误 具体log<a href="https://www.cunoe.com/usr/uploads/uwsgi-log.txt">[Here]</a><br>经过一番排查 发现是gcc的版本问题 服务器自带的gcc版本为5.4的 需要降级到4.7</p>
<pre><code>sudo apt-get install gcc-4.7
sudo rm /usr/bin/gcc
sudo ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
</code></pre>
<h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><p>创建一个名为<code>test.py</code>的文件：</p>
<pre><code>def application(env, start_response):
    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;,&#39;text/html&#39;)])
    return [b&quot;Hello World&quot;] # python3
    # return [&quot;Hello World&quot;] # python2
</code></pre>
<blockquote>
<p>要注意Python 3和Python 2的区别<br>运行uWSGI：</p>
</blockquote>
<pre><code>uwsgi --http :8000 --wsgi-file test.py
</code></pre>
<ul>
<li>http :8000：指使用http协议，端口8000</li>
<li>wsgi-file：加载指定文件</li>
</ul>
<p>此时可以通过浏览器访问8000端口:</p>
<blockquote>
<p><a href="http://example.com:8000/">http://example.com:8000</a><br>并得到一个<code>Hello World</code>的返回值</p>
</blockquote>
<h3 id="加载Django项目"><a href="#加载Django项目" class="headerlink" title="加载Django项目"></a>加载Django项目</h3><p>基础测试正常后，我们可以开始考虑部署到Django项目上<br>首先，我们需要确保Django项目的正常工作</p>
<pre><code>python manage.py runserver
</code></pre>
<p>而后可以通过如下指令将uWSGI接入Django</p>
<pre><code>uwsgi --http :8000 --module myWeb.wsgi
</code></pre>
<ul>
<li>module：加载指定wsgi模块<br>此时你可以通过浏览器访问</li>
</ul>
<blockquote>
<p><a href="http://example.com:8000/">http://example.com:8000</a></p>
</blockquote>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><pre><code>sudo apt-get install nginx
sudo /etc/init.d/nginx start
</code></pre>
<p>此时，你可以通过浏览器访问80端口来查看Nginx是否正常工作<br>一般来说 你会得到一个Welcome to nginx的信息</p>
<h2 id="为Django配置nginx"><a href="#为Django配置nginx" class="headerlink" title="为Django配置nginx"></a>为Django配置nginx</h2><p>你需要一个<code>uwsgi_params</code>文件，可以在<a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params">https://github.com/nginx/nginx/blob/master/conf/uwsgi_params</a>这里找到。<br>请将其复制下来并粘贴到你的项目目录中</p>
<p>接着创建一个<code>myWeb_nginx.conf</code>文件并写入如下信息</p>
<pre><code># myWeb_nginx.conf

# the upstream component nginx needs to connect to
upstream django &#123;
    server unix:///path/myWeb/myWeb.sock; # for a file socket
    # server 127.0.0.1:8001; # for a web port socket (we&#39;ll use this first)
&#125;

# configuration of the server
server &#123;
    # the port your site will be served on
    listen      8000;
    # the domain name it will serve for
    server_name .example.com; # substitute your machine&#39;s IP address or FQDN
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # Django media
    location /media  &#123;
        alias /path/myWeb/media;  # your Django project&#39;s media files - amend as required
    &#125;

    location /static &#123;
        alias /path/myWeb/static; # your Django project&#39;s static files - amend as required
    &#125;

    # Finally, send all non-media requests to the Django server.
    location / &#123;
        uwsgi_pass  django;
        include     /path/myWeb/uwsgi_params; # the uwsgi_params file you installed
    &#125;
&#125;
</code></pre>
<blockquote>
<p>注：这里我们使用了Unix socket</p>
</blockquote>
<p>并自行修改里面的具体信息<br>最后将文件链接到sites-enabled</p>
<pre><code>sudo ln -s /path/myWeb/myWeb_nginx.conf /etc/nginx/sites-enabled
</code></pre>
<h3 id="Django静态文件部署"><a href="#Django静态文件部署" class="headerlink" title="Django静态文件部署"></a>Django静态文件部署</h3><p>在Django项目中 编辑myWeb/settings.py<br>在最后面添加<code>STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)</code><br>接着运行</p>
<pre><code>python manage.py collectstatic
</code></pre>
<h2 id="Nginx和uWSGI"><a href="#Nginx和uWSGI" class="headerlink" title="Nginx和uWSGI"></a>Nginx和uWSGI</h2><p>输入<code>uwsgi --socket myWeb.sock --wsgi-file test.py</code>并在浏览器中访问以测试nginx是否正常运行</p>
<p>如果出现无法访问，可以尝试如下命令</p>
<pre><code>uwsgi --socket myWeb.sock --wsgi-file test.py --chmod-socket=666
</code></pre>
<p>给nginx权限去使用这个socket<br>测试通过后可以使用如下指令来运行Django应用</p>
<pre><code>uwsgi --socket myWeb.sock --module myWeb.wsgi --chmod-socket=666
</code></pre>
<p>测试通过后我们在项目目录创建一个<code>myWeb_uwsgi.ini</code>文件来方便我们启动</p>
<pre><code># myWeb_uwsgi.ini file
[uwsgi]

# Django-related settings
# the base directory
chdir           = /path/project
# Django&#39;s wsgi file
module          = project.wsgi

# process-related settings
# master
master          = true
# maximum number of worker processes
processes       = 10
# the socket (use the full path to be safe
socket          = /path/project/myWeb.sock
# ... with appropriate permissions - may be needed
chmod-socket    = 666
# clear environment on exit
vacuum          = true
</code></pre>
<p>最后使用这个文件运行uWSGI并测试Django站点是否正常工作</p>
<pre><code>uwsgi --ini myWeb_uwsgi.ini
</code></pre>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>你好！世界！</title>
    <url>/2018/09/09/hello-world/</url>
    <content><![CDATA[<p>你好(*´▽｀)ノノ</p>
<p>我是CUNOE，这是我的BLOG，用于记录我的一生，爱自己，爱生活，送给我自己！</p>
]]></content>
  </entry>
  <entry>
    <title>阿里云SSL免费申请及使用</title>
    <url>/2018/08/26/ssl/</url>
    <content><![CDATA[<h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><p>在国内提供免费SSL证书服务的云厂商其实不少<br>比如阿里云 腾讯等<br>最近因为觉得Let’s Energy证书需要3个月续签过于麻烦(虽然一个脚本的事…<br>于是生起在国内寻找是否有免费提供SSL证书服务的云厂商 一查 果然不少<br>由于对阿里云的偏好(不包括阿里云无尽的推销电话服务<br>果断选择了阿里云作为这次的目标</p>
<h2 id="证书申请"><a href="#证书申请" class="headerlink" title="证书申请"></a>证书申请</h2><p>阿里云提供的是Symantec的单域名证书申请<br>登录[阿里云官网][1]并进入控制台 搜索<code>SSL证书</code><br>并在右上角点击购买证书<br>![Aliyun-SSL][2]<br>进入该界面 并做如下操作<br>#请务必按照顺序操作</p>
<blockquote>
<p>选择品牌&gt; Symantec<br>保护类型&gt; 1个域名<br>证书类型&gt; 免费型DV SSL<br>立即购买</p>
</blockquote>
<p>购买完成后 不要着急 阿里云还需要审核你的身份<br>进入控制台 &gt; SSL证书管理<br>按照真实信息进行填写并审核(审核速度还可以的 至少没有网上说的一个小时 我只花了10分钟左右<br>之后在证书管理处直接下载证书并部署即可(阿里云有专门的安装证书的说明 很方便就安装完成了</p>
<p>笔记最后更新时间 <code>2018-08-26 04:40</code><br>  [1]: <a href="https://www.aliyun.com/">https://www.aliyun.com</a><br>  [2]: <a href="https://www.cunoe.com/usr/uploads/aliyun-ssl.png">https://www.cunoe.com/usr/uploads/aliyun-ssl.png</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>从Wordpress到Tyepcho</title>
    <url>/2018/08/25/typecho/</url>
    <content><![CDATA[<p>Wow~<br>由于Wordpress过于臃肿 很早就想换到另一个更好的博客<br>只是一直没下定决心 今天终于是从Wordpress搬到Typecho这个由国人开发的博客<br>网站的响应速度也是很快<br>嘛 总是一切都还不错<br>就这样啦~ 之后会发一篇新笔记吧…<br>咕咕咕~~</p>
<p>网站LOGO来源：<a href="https://www.pixiv.net/member_illust.php?mode=medium&illust_id=58769413">Nahaki - 第六駆逐隊(58769413_p4)</a></p>
<p>笔记最后更新时间 <code>2018-08-25 15:41</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>Typecho</tag>
      </tags>
  </entry>
</search>
